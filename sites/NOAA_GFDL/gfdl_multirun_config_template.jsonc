// This a template for configuring MDTF to run PODs that analyze multi-run/ensemble data
// stored on GFDL file systems
// Copy this file, rename it, and customize the settings as needed
// Pass your file to the framework using the -f/--input-file flag, and use --site NOAA_GFDL
// Any other explicit command line options will override what's listed here.
//
// All text to the right of an unquoted "//" is a comment and ignored, as well
// as blank lines (JSONC quasi-standard.)
//
// Remove your test config file, or any changes you make to this template if you do not rename it,
// from your remote repository before you submit a PR for review.
// To generate CMIP synthetic data in the example dataset, run the following:
// > mamba env create --force -q -f ./src/conda/_env_synthetic_data.yml
// > conda activate _MDTF_synthetic_data
// > pip install mdtf-test-data
// > cd <root directory>/mdtf
// > mkdir mdtf_test_data && cd mdtf_test_data
// > mdtf_synthetic.py -c CMIP --startyear 1980 --nyears 5
// > mdtf_synthetic.py -c CMIP --startyear 1985 --nyears 5
// Note that MODEL_DATA_ROOT assumes that mdtf_test_data is one directory above MDTF-diagnostics
// in this sample config file
{
  // Run each ensemble on the example POD.
  // Add other PODs that work on ensemble datasets to the pod_list as needed
  "pod_list" : [
     "example_multicase"
   ],
   // Each CASENAME corresponds to a different simulation/output dataset
  "case_list" : [
     {
      "CASENAME" : "ESM4_historical_D1",
      "model" : "GFDL-ESM4",
      "convention" : "CMIP",
      "FIRSTYR" : 1990,
      "LASTYR" : 1999,
      "CASE_ROOT_DIR" : "/archive/oar.gfdl.cmip6/ESM4/DECK/ESM4_historical_D1/gfdl.ncrc4-intel16-prod-openmp/pp"
     },
     {
      "CASENAME" : "ESM4_piControl_D",
      "model" : "GFDL-ESM4",
      "convention" : "CMIP",
      "FIRSTYR" : 600,
      "LASTYR" : 609,
      "CASE_ROOT_DIR" : "/archive/oar.gfdl.cmip6/ESM4/DECK/ESM4_piControl_D/gfdl.ncrc4-intel16-prod-openmp/pp"
     }
  ],
  // PATHS ---------------------------------------------------------------------
  // Location of supporting data downloaded when the framework was installed.

  // If a relative path is given, it's resolved relative to the MDTF-diagnostics
  // code directory. Environment variables (eg, $HOME) can be referenced with a
  // "$" and will be expended to their current values when the framework runs.

  // Parent directory containing results from different models.
  "MODEL_DATA_ROOT": "$MDTF_TMPDIR/inputdata/model",

  // Site-specific installation of observational data used by individual PODs.
  // This will be GCP'ed locally if running on PPAN.
  "OBS_DATA_REMOTE": "/home/oar.gfdl.mdtf/mdtf/inputdata/obs_data",

  // Parent directory containing observational data used by individual PODs.
  "OBS_DATA_ROOT": "$MDTF_TMPDIR/inputdata/obs_data",

  // Working directory.
  "WORKING_DIR": "$MDTF_TMPDIR/wkdir",

  // Directory to write output files. Defaults to working directory if blank.
  "OUTPUT_DIR": "$MDTF_TMPDIR/mdtf_out",

  // GFDL ----------------------------------------------------------------------
  // Settings specific to operation at GFDL.

  // If running on GFDL PPAN, set $MDTF_TMPDIR to this location and
  // create temp files here. Must be accessible via gcp.
  "GFDL_PPAN_TEMP": "$TMPDIR",

  // If running on a GFDL workstation, set $MDTF_TMPDIR to this location
  // and create temp files here. Must be accessible via gcp.
  "GFDL_WS_TEMP": "/$MDTF_TMPDIR",

  // Set flag to run framework in 'online' mode, processing data as part of the
  // FRE pipeline. Normally this is done by calling the mdtf_gfdl.csh wrapper
  // script from the XML.
  "frepp": false,

  // Set flag search entire /pp/ directory for model data; default is to
  // restrict to model component passed by FRE. Ignored if --frepp is not set.
  "ignore_component": false,

  // DATA ----------------------------------------------------------------------
  // Settings affecting the framework's retrieval of model data.

  // Method used to fetch model data.
  "data_manager": "GFDL_auto",

  // Data type that PODs will run
  // "single_run" (default) or "multi_run"
  "data_type": "multi_run",

  // Time (in seconds) to wait before giving up on transferring a data file to
  // the local filesystem. Set to zero to disable.
  "file_transfer_timeout": 900,

  // Set to true to retain local temp directories of downloaded data.
  "keep_temp": false,

  // RUNTIME -------------------------------------------------------------------
  // Settings affecting the runtime environment of the PODs.
  "environment_manager": "conda",

  // Path to the Anaconda installation. Only used if environment_manager='Conda'.
  // Set equal to "" to use conda from your system's $PATH.
  "conda_root": "/home/oar.gfdl.mdtf/miniconda3",

  // Root directory for Anaconda environment installs. Only used if
  // environment_manager = 'Conda'. Set equal to '' to install in your system's
  // default location.
  "conda_env_root": "/home/oar.gfdl.mdtf/miniconda3/envs",

  // Path to micromamba executable. Required if using micromamba to manage environments
  "micromamba_exe": "",

  // Root directory for python virtual environments. Only used if
  // environment_manager = 'Virtualenv'. Set equal to '' to install in your
  // system's default location.
  "venv_root": "./envs/venv",

  // Root directory for R packages requested by PODs. Only used if
  // environment_manager = 'Virtualenv'. Set equal to '' to install in your
  // system library.
  "r_lib_root": "./envs/r_libs",

  // OUTPUT --------------------------------------------------------------------
  // Settings affecting what output is generated.

  // Set flag to have PODs save postscript figures in addition to bitmaps.
  "save_ps": false,

  // Set flag to have PODs save netCDF files of processed data.
  "save_nc": false,

  // Set flag to save HTML and bitmap plots in a .tar file.
  "make_variab_tar": false,

  // Set flag to overwrite results in OUTPUT_DIR; otherwise results saved under
  // a unique name.
  "overwrite": false,

  // DEBUG ---------------------------------------------------------------------
  // Settings used in debugging.

  // Log verbosity level.
  "verbose": 1,

  // Set flag for framework test. Data is fetched but PODs are not run.
  "test_mode": false,

  // Set flag for framework test. No external commands are run and no remote
  // data is copied. Implies test_mode.
  "dry_run": false
}

