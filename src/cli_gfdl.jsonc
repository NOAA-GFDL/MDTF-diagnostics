// Configuration for command-line arguments for MDTF-diagnostics driver script.
//
// This version pertains to the GFDL site-specific installation.
//
// All text to the right of an unquoted "//" is a comment and ignored, as well
// as blank lines (JSONC quasi-standard.)
//
// DO NOT modify this file. Instead, edit a copy of default_gfdl.jsonc 
// and pass it to the script with the --config_file/-f option.
//
// Entries here are used in src/cli.py to configure command-line options 
// accepted by the script. Syntax is based on python's argparse library, see
// https://docs.python.org/2.7/library/argparse.html or 
// https://docs.python.org/2.7/howto/argparse.html. 
//
{
  "description" : "Driver script for the NOAA Model Diagnostics Task Force (MDTF) package, which runs process-oriented diagnostics (PODs) on climate model data. See documentation at https://github.com/NOAA-GFDL/MDTF-diagnostics.\n\nThe first form runs diagnostics on data at CASE_ROOT_DIR, using configuration set on the command line or in INPUT_FILE.\nThe second form ('mdtf info') prints information about available diagnostics.",
  "arguments": [ // Top-level args not in any group
    {
      "name": "version", 
      "action": "version", 
      "version": "%(prog)s 3.0 beta 2"
    },{
      "name": "input_file",
      "help": "Path to a user configuration file that sets options listed here. This can be a JSON file of the form given in src/default_tests.jsonc, or a text file containing command-line arguments. Options set explicitly on the command line will still override settings in this file.",
      "is_positional": true,
      "nargs" : "?", // 0 or 1 occurrences: might have set this with --input_file
      "metavar" : "INPUT_FILE"
    },{
      "name": "root_dir",
      "help": "Root directory of model data to analyze.",
      "is_positional": true,
      "nargs" : "?", // 0 or 1 occurrences: might have set this with --CASE_ROOT_DIR
      "metavar" : "CASE_ROOT_DIR"
    },{
      "name": "input_file",
      "short_name": "f",
      "help": "Alternate way to specify user configuration file (with a flag instead of a positional argument.)",
      "type" : "str",
      "metavar" : "INPUT_FILE",
      "dest": "flag_input_file"
    }
  ],
  "argument_groups" : [
    {
      "name" : "PATHS",
      "description" : "Location of input and output data. If a relative path is given, it's resolved relative to the MDTF-diagnostics code directory.",
      "arguments" : [
        {
          "name": "MODEL_DATA_ROOT",
          "help": "Parent directory containing results from different models.",
          "default" : "$MDTF_GFDL_TMPDIR/inputdata/model",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "OBS_DATA_REMOTE",
          "help": "Site-specific installation of observational data used by individual PODs. This will be GCP'ed locally if running on PPAN.",
          "default" : "/home/Oar.Gfdl.Mdteam/DET/analysis/mdtf/obs_data",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "OBS_DATA_ROOT",
          "help": "Local parent directory containing observational data used by individual PODs.",
          "default" : "$MDTF_GFDL_TMPDIR/inputdata/obs_data",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "OUTPUT_DIR",
          "short_name" : "o",
          "help": "Directory to write output files.",
          "default" : "$HOME/mdtf_out",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "WORKING_DIR",
          "short_name" : "w",
          "help": "Working directory. Defaults to output directory if unspecified.",
          "default" : "$MDTF_GFDL_TMPDIR/wkdir",
          "metavar" : "<DIR>",
          "parse_type": "path"
        }
      ]
    },{
      "name" : "MODEL",
      "description" : "Settings describing the input model data.",
      "arguments" : [
        {
          "name": "CASE_ROOT_DIR",
          "help": "Alternate way to specify root directory of model data (with a flag instead of a positional argument.)",
          "metavar" : "<DIR>",
          "type" : "str",
          "dest": "flag_root_dir"
        },{
          "name": "FIRSTYR",
          "short_name" : "Y",
          "help": "Starting year of analysis period.",
          "type" : "int",
          "metavar" : "<year>"
        },{
          "name": "LASTYR",
          "short_name" : "Z",
          "help": "Ending year of analysis period (inclusive).",
          "type" : "int",
          "metavar" : "<year>"
        },{
          "name": "CASENAME",
          "short_name" : "n",
          "help": "Identifier used to label the input model dataset.",
          "type" : "str",
          "metavar" : "<name>"
        },{
          "name": "convention",
          "short_name" : "c",
          "help": "Variable name/unit convention used in model data.",
          "default": "CMIP_GFDL",
          "metavar" : "<convention>"
        },{
          "name": "model",
          "short_name" : "m",
          "help": "Model name (only used in CMIP6 input).",
          "type": "str",
          "metavar" : "<source_id>"
        },{
          "name": "experiment",
          "short_name" : "e",
          "help": "Experiment ID (only used in CMIP6 input).",
          "type" : "str",
          "metavar" : "<experiment_id>"
        },{
          "name": "component",
          "hidden" : true,
          "help": "",
          "default" : ""
        },{
          "name": "data_freq",
          "hidden" : true,
          "help": "",
          "default" : ""
        },{
          "name": "chunk_freq",
          "hidden" : true,
          "help": "",
          "default" : ""
        }
      ]
    },{
      "name" : "GFDL",
      "description" : "Settings specific to operation at GFDL.",
      "arguments" : [
        {
          "name": "GFDL_PPAN_TEMP",
          "help": "If running on GFDL PPAN, set $MDTF_GFDL_TMPDIR to this location and create temp files here. Must be accessible via gcp.",
          "default": "$TMPDIR",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "GFDL_WS_TEMP",
          "help": "If running on a GFDL workstation, set $MDTF_GFDL_TMPDIR to this location and create temp files here. Must be accessible via gcp.",
          "default": "/net2/$USER/tmp",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "frepp",
          "help": "Set flag to run framework in 'online' mode, processing data as part of the FRE pipeline. Normally this is done by calling the mdtf_gfdl.csh wrapper script from the XML.",
          "default" : false
        },{
          "name": "ignore_component",
          "help": "Set flag search entire /pp/ directory for model data; default is to restrict to model component passed by FRE. Ignored if --frepp is not set.",
          "default" : false
        }
      ]
    },{
      "name" : "DATA",
      "description" : "Settings affecting the framework's retrieval of model data.",
      "arguments" : [
        {
          "name": "data_manager",
          "help": "Method used to fetch model data.",
          "default" : "GFDL_auto"
        },{
          "name": "file_transfer_timeout",
          "help": "Time (in seconds) to wait before giving up on transferring a data file to the local filesystem. Set to zero to disable.",
          "type" : "int",
          "default" : 900,
          "metavar" : "<seconds>"
        },{
          "name": "keep_temp",
          "help": "Set to true to retain local temp directories of downloaded data.",
          "default" : false
        }
      ]
    },{
      "name" : "DIAGNOSTICS",
      "arguments" : [
        {
          "name": "pods",
          "short_name": "p",
          "help": "Diagnostics to run on model data. This can be 'all', one or more names, or one or more realms. Run `%(prog)s info pods` for a list of recognized values. Terminate list with '--' or another flag.",
          "default" : "all",
          "nargs" : "+",
          //"choices" : "self.get_pods_for_help_text()",
          //"eval_choices" : true,
          "metavar" : ""
        }
      ]
    },{
      "name" : "RUNTIME",
      "description" : "Settings affecting the runtime environment of the PODs.",
      "arguments" : [
        {
          "name": "environment_manager",
          "help": "Method to manage POD runtime dependencies.",
          "default" : "GFDL_conda"
        },{
          "name": "conda_root",
          "help": "Path to the Anaconda installation. Only used if environment_manager = 'Conda'. Set equal to '' to use conda from your system's $PATH.",
          "default" : "/home/mdteam/anaconda",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "conda_env_root",
          "help": "Root directory for Anaconda environment installs. Only used if environment_manager = 'Conda'. Set equal to '' to install in your system's default location.",
          "default" : "/home/mdteam/DET/analysis/mdtf/MDTF-diagnostics/envs",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "venv_root",
          "help": "Root directory for python virtual environments. Only used if environment_manager = 'Virtualenv'. Set equal to '' to install in your system's default location.",
          "default" : "./envs/venv",
          "metavar" : "<DIR>",
          "parse_type": "path"
        },{
          "name": "r_lib_root",
          "help": "Root directory for R packages requested by PODs. Only used if environment_manager = 'Virtualenv'. Set equal to '' to install in your system library.",
          "default" : "./envs/r_libs",
          "metavar" : "<DIR>",
          "parse_type": "path"
        }
      ]
    },{
      "name" : "OUTPUT",
      "description" : "Settings affecting what output is generated.",
      "arguments" : [
        {
          "name": "save_ps",
          "help": "Set flag to have PODs save postscript figures in addition to bitmaps.",
          "default" : false
        },{
          "name": "save_nc",
          "help": "Set flag to save all processed data, in addition to plots.",
          "default" : false
        },{
          "name": "save_non_nc",
          "help": "Set flag to save all processed data except netcdf files.",
          "default" : false
        },{
          "name": "make_variab_tar",
          "help": "Set flag to save HTML and bitmap plots in a .tar file.",
          "default" : false
        },{
          "name": "convert_flags",
          "hidden" : true,
          "help": "Default flags to pass to PS -> bitmap figure conversion.",
          "default" : "-crop 0x0+5+5"
        },{
          "name": "convert_output_fmt",
          "hidden" : true,
          "help": "Default format for bitmap figure output.",
          "default" : "png"
        },{
          "name": "overwrite",
          "help": "Set flag to overwrite results in OUTPUT_DIR; otherwise results saved under a unique name.",
          "default" : false
        }
      ]
    },{
      "name" : "DEBUG",
      "description" : "Settings used in debugging.",
      "arguments" : [
        {
          "name": "verbose",
          "short_name": "v",
          "help": "Increase log verbosity level.",
          "default" : 1, 
          "action": "count" 
        },{
          "name": "test_mode",
          "help": "Set flag for framework test. Data is fetched but PODs are not run.",
          "default" : false
        },{
          "name": "dry_run",
          "help": "Set flag for framework test. No external commands are run and no remote data is copied. Implies test_mode.",
          "default" : false
        }
      ]
    }
  ]
}