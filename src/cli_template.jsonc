// Configuration for command-line arguments for MDTF-diagnostics driver script.
// This is used by install.py to generate cli.jsonc.
// DO NOT modify this file. Instead, edit cli.jsonc.
//
// Entries here are used in framework/cli.py to configure command-line options
// accepted by the script. Syntax is based on python's argparse library, see
// https://docs.python.org/2.7/library/argparse.html or
// https://docs.python.org/2.7/howto/argparse.html.
//
// All text to the right of an unquoted "//" is a comment and ignored, as well
// as blank lines (JSONC quasi-standard.)
{
  "usage": "mdtf run [options] [CASE_ROOT_DIR]",
  "description" : "Runs diagnostics in the NOAA Model Diagnostics Task Force (MDTF) package. See documentation at https://mdtf-diagnostics.rtfd.io.\n\nThe scripts runs specified diagnostics on data at CASE_ROOT_DIR, using configuration set on the command line and/or through a file passed via --input_file.",
  "arguments": [ // Top-level args not in any group
    {
      "name": "CASE_ROOT_DIR",
      "help": "Root directory of model data to analyze.",
      "is_positional": true,
      "nargs" : "?", // 0 or 1 occurrences: might have set this with --CASE_ROOT_DIR
      "type" : "str",
      "metavar" : "CASE_ROOT_DIR"
    }
  ],
  "argument_groups" : [
    {
      "title" : "PATHS",
      "description" : "Location of input and output data. If a relative path is given, it's resolved relative to the MDTF-diagnostics code directory.",
      "arguments" : [
        {
          "name": "OBS_DATA_ROOT",
          "help": "Required setting. Parent directory containing observational data used by individual PODs.",
          "metavar" : "<DIR>",
          "action": "PathAction"
        },{
          "name": "CASE_ROOT_DIR",
          "help": "Alternate way to specify root directory of model data (with a flag instead of a positional argument.)",
          "metavar" : "<DIR>",
          "dest": "flag_root_dir"
        },{
          "name": "WORKING_DIR",
          "short_name" : "w",
          "help": "Working directory. Defaults to output directory if unspecified.",
          "metavar" : "<DIR>",
          "action": "PathAction"
        },{
          "name": "OUTPUT_DIR",
          "short_name" : "o",
          "help": "Required setting. Directory to write output files.",
          "metavar" : "<DIR>",
          "action": "PathAction"
        }
      ]
    },{
      "title" : "DATA",
      "description" : "Options describing the input model data.",
      "arguments" : [
        {
          "name": "convention",
          "short_name" : "c",
          "help": "Variable name/unit convention used in model data.",
          "default": "CMIP",
          "metavar" : "<convention>"
        },{
          "name": "large_file",
          "help": "Set this flag to handle large volumes of input model data. If set, use netCDF4 format in intermediate data files to handle variables >4gb (HDF5 API). Default is to use netCDF4 classic format.",
          "default" : false
        },{
          "name": "strict",
          "help": "If set, disables experiment selection heuristics and raises error if experiment not uniquely specified by user input.",
          "default" : false
        },{
          "name": "disable_preprocessor",
          "help": "If set, disables metadata checks and unit conversion by the framework prior to POD execution. This is only provided as a workaround for input data which is known to have incorrect metadata.",
          "default" : false
        },{
          "name": "overwrite_file_metadata",
          "help": "If set, overwrites file metadata in the event of conflict with user's specifications (via --convention or --data_manager=ExplicitFile). This is provided as a workaround for input data which is known to have incorrect metadata.",
          "default" : false
        },{
          "name": "data_manager",
          "help": "Source used to query and fetch model data.",
          "default": "Local_file",
          "action": "PluginArgAction"
        }
      ]
    },{
      "title" : "ANALYSIS",
      "description" : "Settings describing what analyses the package should perform.",
      "arguments" : [
        {
          "name": "CASENAME",
          "short_name" : "n",
          "help": "Required setting. Identifier used to label the package's output for the selected model data.",
          "metavar" : "<name>"
        },{
          "name": "FIRSTYR",
          "short_name" : "Y",
          "help": "Required setting. Starting year of analysis period.",
          "type" : "int",
          "metavar" : "<year>"
        },{
          "name": "LASTYR",
          "short_name" : "Z",
          "help": "Required setting. Ending year of analysis period (inclusive).",
          "type" : "int",
          "metavar" : "<year>"
        },{
          "name": "pods",
          "short_name": "p",
          "help": "Diagnostics to run on model data. This can be 'all', one or more diagnostic names, or one or more modeling  realms. Run `%(prog)s info pods` for a list of recognized values. Terminate list with '--' or another flag.",
          "default" : "all",
          "nargs" : "+",
          //"choices" : "self.get_pods_for_help_text()",
          //"eval_choices" : true,
          "metavar" : ""
        }
      ]
    },{
      "title" : "RUNTIME",
      "description" : "Options affecting the runtime environment of the PODs.",
      "arguments" : [
        {
          "name": "environment_manager",
          "help": "Method to manage POD runtime dependencies.",
          "default" : "Conda",
          "action": "PluginArgAction"
        },{
          "name": "runtime_manager",
          "hidden" : true,
          "help": "Method to run PODs.",
          "default" : "Subprocess",
          "action": "ClassImportAction"
        }
      ]
    },{
      "title" : "OUTPUT",
      "description" : "Options affecting what output is generated.",
      "arguments" : [
        {
          "name": "output_manager",
          "hidden" : true,
          "help": "Method to process POD output.",
          "default" : "HTML",
          "action": "PluginArgAction"
        }
      ]
    },{
      "title" : "DEBUG",
      "description" : "Options used in debugging.",
      "arguments" : [
        {
          "name": "verbose",
          "short_name": "v",
          "help": "Increase console log verbosity level. -v prints debug information.",
          "default" : 0,
          "action": "count"
        },{
          "name": "quiet",
          "short_name": "q",
          "help": "Decrease console log verbosity level. -q prints warnings only, -qq prints errors only, and -qqq prints no output.",
          "default" : 0,
          "action": "count"
        },{
          "name": "file_transfer_timeout",
          "help": "Time (in seconds) to wait before giving up on transferring a data file to the local filesystem. Set to zero to disable.",
          "type" : "int",
          "default" : 300,
          "metavar" : "<seconds>"
        },{
          "name": "keep_temp",
          "help": "Set to true to retain local temp directories of downloaded data.",
          "default" : false
        },{
          "name": "test_mode",
          "help": "Set flag for framework test. Data is fetched but PODs are not run.",
          "default" : false
        },{
          "name": "dry_run",
          "help": "Set flag for framework test. No external commands are run and no remote data is copied. Implies test_mode.",
          "default" : false
        }
      ]
    }
  ]
}